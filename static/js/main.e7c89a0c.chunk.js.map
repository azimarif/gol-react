{"version":3,"sources":["gameLibrary.js","util.js","gameOfLife.js","index.js"],"names":["require","cartesianSquare","cartesianProduct","justifyLength","range","subtractPositions","isNotOrigin","addPositions","makeWorld","dimensions","height","width","world","Array","fill","map","x","generateRow","join","findNeighboursPositions","currPosition","filter","delta","isValidPosition","row","column","undefined","findNeighbours","bind","position","countAliveNeighbours","list","length","decideState","cell","module","exports","makeGrid","gridArray","index","findAliveposition","_ref","alivePosition","push","extractSize","_ref2","bottomRight","topLeft","updateWorld","currGeneration","generateNextWorld","_ref3","nextWorld","aliveNeighboursCount","extractValidPosition","operator","operations","+","-","set1","set2","forEach","element1","element2","repeatSymbol","times","symbol","Math","max","set","position1","position2","text","spaceWidth","toString","limit","count","number","nextGeneration","bounds","worldDetails","GameOfLife","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initialize","size","state","aliveCells","initializeAliveCell","start","displayNextGeneration","setInterval","document","getElementById","className","setState","event","selectedCell","target","id","split","rowIndex","columns","react_default","a","createElement","key","onClick","table","createRow","renderTable","React","Component","ReactDOM","render","src_GameOfLife"],"mappings":"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","file":"static/js/main.e7c89a0c.chunk.js","sourcesContent":["const {\n  cartesianSquare,\n  cartesianProduct,\n  justifyLength,\n  range,\n  subtractPositions,\n  isNotOrigin,\n  addPositions\n} = require('./util.js');\n\nconst findAliveposition = function ({ world, dimensions }) {\n  let alivePosition = [];\n  let height = dimensions[0];\n  let width = dimensions[1];\n  cartesianProduct(range(height), range(width)).map(position => {\n    world[position[0]][position[1]] == 1 &&\n      alivePosition.push([position[0], position[1]]);\n  });\n  return alivePosition;\n};\n\nconst updateWorld = function (world, currGeneration) {\n  currGeneration.map(position => {\n    isValidPosition(world, position) && (world[position[0]][position[1]] = 1);\n  });\n  return world;\n};\n\nconst extractSize = function ({ bottomRight, topLeft }) {\n  let height = bottomRight[0] - topLeft[0] + 1;\n  let width = bottomRight[1] - topLeft[1] + 1;\n  return [height, width];\n};\n\nconst makeWorld = function (dimensions) {\n  let height = dimensions[0];\n  let width = dimensions[1];\n  let world = new Array(height).fill('1');\n  world = world.map(x => new Array(width).fill('*').map(x => 0));\n  return world;\n};\n\nconst makeGrid = function (world) {\n  let gridArray = [];\n  for (let index = 0; index < world.length; index++) {\n    gridArray[index] = generateRow(world[index]);\n  }\n  return gridArray.join('\\n');\n};\n\nconst generateRow = function (world) {\n  world = world.map(x => justifyLength(x, 3) + '|');\n  return '|' + world.join('');\n};\n\nconst findNeighboursPositions = function (currPosition) {\n  return cartesianSquare([-1, 0, 1])\n    .filter(isNotOrigin)\n    .map(delta => addPositions(delta, currPosition));\n};\n\nconst isValidPosition = function (world, currPosition) {\n  let row = currPosition[0];\n  let column = currPosition[1];\n  return world[row] != undefined && world[row][column] != undefined;\n};\n\nconst findNeighbours = function (world, currPosition) {\n  let neighboursPositions = findNeighboursPositions(currPosition);\n  let neighbours = [];\n  return neighboursPositions\n    .filter(isValidPosition.bind(null, world))\n    .map(position => world[position[0]][position[1]]);\n};\n\nconst countAliveNeighbours = function (list, position) {\n  return findNeighbours(list, position).filter(x => x == 1).length;\n};\n\nconst extractValidPosition = function (alivePosition, topLeft, operator) {\n  let operations = { '+': addPositions, '-': subtractPositions };\n  return (alivePosition = alivePosition.map(dimensions =>\n    operations[operator](dimensions, topLeft)\n  ));\n};\n\nconst decideState = function (length, cell) {\n  let rules = ['0', '0', cell, '1', '0', '0', '0', '0', '0'];\n  return rules[length];\n};\n\nconst generateNextWorld = function ({ dimensions, world }) {\n  let nextWorld = makeWorld(dimensions);\n  for (let row = 0; row < dimensions[0]; row++) {\n    for (let column = 0; column < dimensions[1]; column++) {\n      let cell = world[row][column];\n      let aliveNeighboursCount = countAliveNeighbours(world, [row, column]);\n      nextWorld[row][column] = decideState(aliveNeighboursCount, cell);\n    }\n  }\n  return nextWorld;\n};\n\nmodule.exports = {\n  makeGrid,\n  makeWorld,\n  findNeighbours,\n  findAliveposition,\n  decideState,\n  findNeighboursPositions,\n  extractSize,\n  updateWorld,\n  isValidPosition,\n  countAliveNeighbours,\n  generateNextWorld,\n  extractValidPosition,\n  generateRow\n};\n","const cartesianProduct = function (set1, set2) {\n  let cartesianProduct = [];\n  set1.forEach(element1 => {\n    set2.forEach(element2 => {\n      cartesianProduct.push([element1, element2]);\n    });\n  });\n  return cartesianProduct;\n};\n\nconst cartesianSquare = function (set) {\n  return cartesianProduct(set, set);\n};\n\nconst addPositions = function (position1, position2) {\n  return [position1[0] + position2[0], position1[1] + position2[1]];\n};\n\nconst range = function (limit) {\n  let count = 0;\n  return new Array(limit).fill('*').map(number => count++);\n};\n\nconst subtractPositions = function (position1, position2) {\n  return [position1[0] - position2[0], position1[1] - position2[1]];\n};\n\nconst isNotOrigin = function (position) {\n  return !(position[0] == 0 && position[1] == 0);\n};\n\nconst justifyLength = function (text, width) {\n  let spaceWidth = width - text.toString().length;\n  return text + repeatSymbol(spaceWidth, ' ');\n};\n\nconst repeatSymbol = function (times, symbol) {\n  times = Math.max(0, times);\n  return new Array(times).fill(symbol).join('');\n};\n\nmodule.exports = {\n  cartesianSquare,\n  cartesianProduct,\n  addPositions,\n  subtractPositions,\n  justifyLength,\n  repeatSymbol,\n  range,\n  isNotOrigin\n};\n","const {\n  makeWorld,\n  findAliveposition,\n  extractSize,\n  updateWorld,\n  extractValidPosition,\n  generateNextWorld\n} = require('./gameLibrary.js');\n\nconst nextGeneration = function (currGeneration, bounds) {\n  let dimensions = extractSize(bounds);\n  let world = makeWorld(dimensions);\n  let { topLeft } = bounds;\n  currGeneration = extractValidPosition(currGeneration, topLeft, '-');\n  world = updateWorld(world, currGeneration);\n  let worldDetails = { world, dimensions };\n  worldDetails.world = generateNextWorld(worldDetails);\n  let alivePosition = findAliveposition(worldDetails);\n  return extractValidPosition(alivePosition, topLeft, '+');\n};\nexport default nextGeneration;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport nextGeneration from './gameOfLife'\n\nclass GameOfLife extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialize();\n    this.bounds = { topLeft: [0, 0], bottomRight: [this.props.size, this.props.size] };\n    this.state = {\n      aliveCells: []\n    }\n  }\n\n  initialize() {\n    this.initializeAliveCell = this.initializeAliveCell.bind(this);\n    this.start = this.start.bind(this);\n    this.nextGeneration = nextGeneration.bind(this);\n    this.displayNextGeneration = this.displayNextGeneration.bind(this);\n  }\n\n  start() {\n    setInterval(this.displayNextGeneration, 500);\n  }\n\n  displayNextGeneration() {\n    this.state.aliveCells.map(cell =>\n      document.getElementById(cell.join('_')).className = 'cell');\n\n    let nextGeneration = this.nextGeneration(this.state.aliveCells, this.bounds);\n\n    nextGeneration.map(cell =>\n      document.getElementById(cell.join('_')).className = 'active-cell');\n    this.setState({ aliveCells: nextGeneration })\n  }\n\n  initializeAliveCell(event) {\n    const selectedCell = event.target.id;\n    const cell = selectedCell.split('_');\n    document.getElementById(selectedCell).className = 'active-cell';\n    let aliveCells = this.state.aliveCells;\n    aliveCells.push(cell);\n    this.setState({ aliveCells });\n  }\n\n  createRow(rowIndex) {\n    let columns = [];\n    for (let column = 0; column < this.props.size; column++) {\n      const id = rowIndex + '_' + column;\n      columns.push(<td className='cell' key={id} id={id} onClick={this.initializeAliveCell} />\n      );\n    }\n    return columns;\n  }\n\n  renderTable() {\n    let table = [];\n    for (let row = 0; row < this.props.size; row++) {\n      table.push(<tr key={row}>{this.createRow(row)}</tr>);\n    }\n    return table;\n  }\n\n  render() {\n    return (\n      <div>\n        <table>{this.renderTable()}</table>\n        <button onClick={this.start}>Start</button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<GameOfLife size={15} />, document.getElementById('root'));\n\n"],"sourceRoot":""}